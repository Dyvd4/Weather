{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      gotCoords: false\n    };\n\n    this.getData = () => {};\n\n    this.getCoords = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        var {\n          latitude,\n          longitude\n        } = position.coords;\n        this.state.data.location = {\n          latitude,\n          longitude\n        };\n        this.setState({\n          gotCoords: true\n        });\n      });\n    };\n\n    this.getGeolocation = async () => {\n      if (this.state.gotCoords == true) {\n        const key = process.env.REACT_APP_GoogleApiKey;\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\n        const data = await response.json();\n        this.setState({\n          gotCoords: false\n        });\n        clearInterval(this.getGeolocation);\n      }\n    };\n\n    this.getWeatherData = async () => {\n      if (this.state.gotCoords == true) {\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const key = process.env.REACT_APP_WeatherApiKey;\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\n        const data = await response.json();\n        this.state.data.weather = {\n          data\n        };\n        this.setState({\n          gotCoords: false\n        });\n        clearInterval(this.getWeatherData);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.componentIsMounted = true;\n    this.getCoords();\n    setInterval(this.getWeatherData, 500);\n    setInterval(this.getGeolocation, 500);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: [/*#__PURE__*/_jsxDEV(Details, {\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Users/David/Documents/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","Wrapper","constructor","props","state","data","gotCoords","getData","getCoords","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","setState","getGeolocation","key","process","env","REACT_APP_GoogleApiKey","lat","lon","response","fetch","json","clearInterval","getWeatherData","REACT_APP_WeatherApiKey","weather","componentDidMount","componentIsMounted","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.componentIsMounted= true;\r\n    this.getCoords();\r\n    setInterval(this.getWeatherData, 500);\r\n    setInterval(this.getGeolocation,500);\r\n  }\r\n  state = {\r\n    data: {},\r\n    gotCoords: false,\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container center\">\r\n        <Details data={this.state.data}></Details>\r\n        <Preview data={this.state.data}></Preview>\r\n      </div>\r\n    );\r\n  }\r\n  getData=()=>{\r\n    \r\n  }\r\n  getCoords = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n\r\n      this.state.data.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n      this.setState({ gotCoords: true });\r\n    });\r\n  };\r\n  getGeolocation = async () => {\r\n    if(this.state.gotCoords == true){\r\n      const key = process.env.REACT_APP_GoogleApiKey;\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\r\n      const data =await response.json();\r\n\r\n      this.setState({gotCoords:false});\r\n      clearInterval(this.getGeolocation);\r\n    }\r\n   \r\n  }\r\n  getWeatherData = async () => {\r\n    if (this.state.gotCoords == true) {\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const key = process.env.REACT_APP_WeatherApiKey;\r\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\r\n      const data = await response.json();\r\n\r\n      this.state.data.weather = {\r\n        data,\r\n      };\r\n\r\n      this.setState({ gotCoords: false });\r\n      clearInterval(this.getWeatherData);\r\n    }\r\n  };\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}