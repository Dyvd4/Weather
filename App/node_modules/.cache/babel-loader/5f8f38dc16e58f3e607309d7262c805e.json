{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport LoadingCircle from './LoadingCircle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      gotCoords: false,\n      gotWeatherData: false\n    };\n\n    this.renderCurrentTab = data => {\n      let test = data;\n    };\n\n    this.getCoords = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        var {\n          latitude,\n          longitude\n        } = position.coords;\n        this.state.data.location = {\n          latitude,\n          longitude\n        };\n        this.setState({\n          gotCoords: true\n        });\n      });\n    };\n\n    this.getGeolocation = async () => {\n      if (this.state.gotCoords == true) {\n        const key = process.env.REACT_APP_GoogleApiKey;\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\n        const data = await response.json();\n        this.setState({\n          gotCoords: false\n        });\n        clearInterval(this.getGeolocation);\n      }\n    };\n\n    this.getWeatherData = async () => {\n      if (this.state.gotCoords == true) {\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const key = process.env.REACT_APP_WeatherApiKey;\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\n        const data = await response.json();\n        this.state.data.weather = {\n          data\n        };\n        this.setState({\n          gotWeatherData: true\n        });\n        clearInterval(this.getWeatherData);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.componentIsMounted = true;\n    this.getCoords();\n    setInterval(this.getWeatherData, 500);\n    setInterval(this.getGeolocation, 500);\n  }\n\n  render() {\n    if (this.state.gotWeatherData) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container center\",\n        children: [/*#__PURE__*/_jsxDEV(Details, {\n          data: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          onClick: this.renderCurrentTab,\n          data: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingCircle, {\n        size: \"50px\",\n        borderWidth: \"10px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Users/David/Documents/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","LoadingCircle","Wrapper","constructor","props","state","data","gotCoords","gotWeatherData","renderCurrentTab","test","getCoords","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","setState","getGeolocation","key","process","env","REACT_APP_GoogleApiKey","lat","lon","response","fetch","json","clearInterval","getWeatherData","REACT_APP_WeatherApiKey","weather","componentDidMount","componentIsMounted","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nimport LoadingCircle from './LoadingCircle';\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.componentIsMounted = true;\r\n    this.getCoords();\r\n    setInterval(this.getWeatherData, 500);\r\n    setInterval(this.getGeolocation, 500);\r\n  }\r\n  state = {\r\n    data: {},\r\n    gotCoords: false,\r\n    gotWeatherData:false\r\n  };\r\n  renderCurrentTab= (data)=>{\r\n    let test = data;\r\n    \r\n  }\r\n  render() {\r\n    if(this.state.gotWeatherData){\r\n      return (\r\n        <div className=\"container center\">\r\n          <Details data={this.state.data}></Details>\r\n          <Preview onClick={this.renderCurrentTab} data={this.state.data}></Preview>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container center\">\r\n        <LoadingCircle size=\"50px\" borderWidth=\"10px\"></LoadingCircle>\r\n      </div>\r\n    );\r\n  }\r\n  getCoords = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n\r\n      this.state.data.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n      this.setState({ gotCoords: true });\r\n    });\r\n  };\r\n  getGeolocation = async () => {\r\n    if (this.state.gotCoords == true) {\r\n      const key = process.env.REACT_APP_GoogleApiKey;\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\r\n      const data = await response.json();\r\n\r\n      this.setState({ gotCoords: false });\r\n      clearInterval(this.getGeolocation);\r\n    }\r\n\r\n  }\r\n  getWeatherData = async () => {\r\n    if (this.state.gotCoords == true) {\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const key = process.env.REACT_APP_WeatherApiKey;\r\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\r\n      const data = await response.json();\r\n\r\n      this.state.data.weather = {\r\n        data,\r\n      };\r\n\r\n      this.setState({ gotWeatherData: true });\r\n      clearInterval(this.getWeatherData);\r\n    }\r\n  };\r\n}\r\n\r\nexport default Wrapper;"]},"metadata":{},"sourceType":"module"}