{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Documents\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport LoadingCircle from './LoadingCircle';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        temperatureUnit: \"Â°C\"\n      },\n      selectedDay: moment().format(\"DD:MM:YYYY\"),\n      gotCoords: false,\n      gotWeatherData: false\n    };\n\n    this.loadCurrentTab = currentForecast => {\n      let oldData = this.state.data;\n      oldData.weather.data.current = currentForecast;\n      let selectedDay = moment.unix(currentForecast.dt).format(\"DD:MM:YYYY\");\n      this.setState({\n        data: oldData,\n        selectedDay\n      });\n    };\n\n    this.switchTemperatureUnit = unit => {\n      let oldData = this.state.data;\n      oldData.temperatureUnit = unit;\n      this.setState({\n        data: oldData\n      });\n    };\n\n    this.getCoords = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        var {\n          latitude,\n          longitude\n        } = position.coords;\n        this.state.data.location = {\n          latitude,\n          longitude\n        };\n        this.setState({\n          gotCoords: true\n        });\n      });\n    };\n\n    this.getGeolocation = async () => {\n      if (this.state.gotCoords == true) {\n        const key = process.env.REACT_APP_GoogleApiKey;\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\n        const data = await response.json();\n        this.setState({\n          gotCoords: false\n        });\n        clearInterval(this.getGeolocation);\n      }\n    };\n\n    this.getWeatherData = async () => {\n      if (this.state.gotCoords == true) {\n        var lat = this.state.data.location.latitude;\n        var lon = this.state.data.location.longitude;\n        const key = process.env.REACT_APP_WeatherApiKey;\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\n        const data = await response.json();\n        this.state.data.weather = {\n          data\n        };\n        this.setState({\n          gotWeatherData: true\n        });\n        clearInterval(this.getWeatherData);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.componentIsMounted = true;\n    this.getCoords();\n    setInterval(this.getWeatherData, 500);\n    setInterval(this.getGeolocation, 500);\n  }\n\n  render() {\n    if (this.state.gotWeatherData) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container center\",\n        children: [/*#__PURE__*/_jsxDEV(Details, {\n          onClick: this.switchTemperatureUnit,\n          data: this.state.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          onClick: this.loadCurrentTab,\n          data: this.state.data,\n          selectedDay: this.state.selectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingCircle, {\n        size: \"50px\",\n        borderWidth: \"10px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Users/David/Documents/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","LoadingCircle","moment","Wrapper","constructor","props","state","data","temperatureUnit","selectedDay","format","gotCoords","gotWeatherData","loadCurrentTab","currentForecast","oldData","weather","current","unix","dt","setState","switchTemperatureUnit","unit","getCoords","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","getGeolocation","key","process","env","REACT_APP_GoogleApiKey","lat","lon","response","fetch","json","clearInterval","getWeatherData","REACT_APP_WeatherApiKey","componentDidMount","componentIsMounted","setInterval","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nimport LoadingCircle from './LoadingCircle';\r\nimport moment from 'moment';\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.componentIsMounted = true;\r\n    this.getCoords();\r\n    setInterval(this.getWeatherData, 500);\r\n    setInterval(this.getGeolocation, 500);\r\n  }\r\n  state = {\r\n    data: {\r\n      temperatureUnit: \"Â°C\"\r\n    },\r\n    selectedDay: moment().format(\"DD:MM:YYYY\"),\r\n    gotCoords: false,\r\n    gotWeatherData: false\r\n  };\r\n  loadCurrentTab = (currentForecast) => {\r\n    let oldData = this.state.data;\r\n    oldData.weather.data.current = currentForecast;\r\n    let selectedDay = moment.unix(currentForecast.dt).format(\"DD:MM:YYYY\");\r\n    this.setState({\r\n      data: oldData,\r\n      selectedDay\r\n    });\r\n  }\r\n  switchTemperatureUnit = (unit) => {\r\n    let oldData = this.state.data;\r\n    oldData.temperatureUnit = unit;\r\n    this.setState({\r\n      data: oldData\r\n    })\r\n  }\r\n  render() {\r\n    if (this.state.gotWeatherData) {\r\n      return (\r\n        <div className=\"container center\">\r\n          <Details onClick={this.switchTemperatureUnit} data={this.state.data}></Details>\r\n          <Preview onClick={this.loadCurrentTab} data={this.state.data} selectedDay={this.state.selectedDay}></Preview>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container center\">\r\n        <LoadingCircle size=\"50px\" borderWidth=\"10px\"></LoadingCircle>\r\n      </div>\r\n    );\r\n  }\r\n  getCoords = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n\r\n      this.state.data.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n      this.setState({ gotCoords: true });\r\n    });\r\n  };\r\n  getGeolocation = async () => {\r\n    if (this.state.gotCoords == true) {\r\n      const key = process.env.REACT_APP_GoogleApiKey;\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=${key}`);\r\n      const data = await response.json();\r\n\r\n      this.setState({ gotCoords: false });\r\n      clearInterval(this.getGeolocation);\r\n    }\r\n\r\n  }\r\n  getWeatherData = async () => {\r\n    if (this.state.gotCoords == true) {\r\n      var lat = this.state.data.location.latitude;\r\n      var lon = this.state.data.location.longitude;\r\n      const key = process.env.REACT_APP_WeatherApiKey;\r\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&lang=de&appid=${key}`);\r\n      const data = await response.json();\r\n\r\n      this.state.data.weather = {\r\n        data,\r\n      };\r\n\r\n      this.setState({ gotWeatherData: true });\r\n      clearInterval(this.getWeatherData);\r\n    }\r\n  };\r\n}\r\n\r\nexport default Wrapper;"]},"metadata":{},"sourceType":"module"}