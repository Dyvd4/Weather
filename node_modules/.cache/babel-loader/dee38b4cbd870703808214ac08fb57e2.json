{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repositories\\\\Private\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.getLocation().then(() => {\n      this.getWeatherData();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: [/*#__PURE__*/_jsxDEV(Details, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  async getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      var {\n        latitude,\n        longitude\n      } = position.coords;\n      this.location = {\n        latitude,\n        longitude\n      };\n      return Promise.resolve();\n    });\n  }\n\n  async getWeatherData() {\n    let {\n      latitude,\n      longitude\n    } = this.location;\n    const key = process.env.WeatherApiKey;\n    const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${latitude}&lon=${longitude}&appid=${key}`;\n    const data = await fetch(link);\n    this.weather = {\n      data\n    };\n    return Promise.resolve(\"Got Weather data\");\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Repositories/Private/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","Wrapper","constructor","props","state","componentDidMount","getLocation","then","getWeatherData","render","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","Promise","resolve","key","process","env","WeatherApiKey","link","data","fetch","weather"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC9BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAQnBC,KARmB,GAQX,EARW;AAElB;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,WAAL,GAAmBC,IAAnB,CAAwB,MAAM;AAC5B,WAAKC,cAAL;AACD,KAFD;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACgB,QAAXH,WAAW,GAAG;AAClBI,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrD,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA0BF,QAAQ,CAACG,MAAvC;AAEA,WAAKC,QAAL,GAAgB;AACdH,QAAAA,QADc;AAEdC,QAAAA;AAFc,OAAhB;AAIA,aAAOG,OAAO,CAACC,OAAR,EAAP;AACD,KARD;AASD;;AACmB,QAAdX,cAAc,GAAG;AACrB,QAAI;AAAEM,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0B,KAAKE,QAAnC;AACA,UAAMG,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AACA,UAAMC,IAAI,GAAI,uDAAsDV,QAAS,QAAOC,SAAU,UAASK,GAAI,EAA3G;AACA,UAAMK,IAAI,GAAG,MAAMC,KAAK,CAACF,IAAD,CAAxB;AACA,SAAKG,OAAL,GAAe;AACbF,MAAAA;AADa,KAAf;AAGA,WAAOP,OAAO,CAACC,OAAR,CAAgB,kBAAhB,CAAP;AACD;;AAtC6B;;AAyChC,eAAelB,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.getLocation().then(() => {\r\n      this.getWeatherData();\r\n    });\r\n  }\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"container center\">\r\n        <Details></Details>\r\n        <Preview></Preview>\r\n      </div>\r\n    );\r\n  }\r\n  async getLocation() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n\r\n      this.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n      return Promise.resolve();\r\n    });\r\n  }\r\n  async getWeatherData() {\r\n    let { latitude, longitude } = this.location;\r\n    const key = process.env.WeatherApiKey;\r\n    const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${latitude}&lon=${longitude}&appid=${key}`;\r\n    const data = await fetch(link);\r\n    this.weather = {\r\n      data,\r\n    };\r\n    return Promise.resolve(\"Got Weather data\");\r\n  }\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}