{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repositories\\\\Private\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    await this.getLocation();\n    let data = await this.getWeatherData();\n    console.log(data);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: [/*#__PURE__*/_jsxDEV(Details, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n  async getLocation() {\n    navigator.geolocation.getCurrentPosition(position => {\n      var {\n        latitude,\n        longitude\n      } = position.coords;\n      console.log(this);\n      this.location = {\n        latitude,\n        longitude\n      };\n      return Promise.resolve();\n    });\n  }\n\n  async getWeatherData() {\n    console.log(this);\n    let lat = this.location.latitude;\n    let lon = this.location.longitude;\n    const key = process.env.WeatherApiKey;\n    const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${lat}&lon=${lon}&appid=${key}`;\n    const data = await fetch(link);\n    return Promise.resolve(data);\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Repositories/Private/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","Wrapper","constructor","props","state","componentDidMount","getLocation","data","getWeatherData","console","log","render","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","Promise","resolve","lat","lon","key","process","env","WeatherApiKey","link","fetch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC9BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SASnBC,KATmB,GASX,EATW;AAGlB;;AACqB,QAAjBC,iBAAiB,GAAG;AACvB,UAAM,KAAKC,WAAL,EAAN;AACA,QAAIC,IAAI,GAAI,MAAM,KAAKC,cAAL,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACgB,QAAXL,WAAW,GAAG;AAClBM,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrD,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA0BF,QAAQ,CAACG,MAAvC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAKS,QAAL,GAAgB;AACdH,QAAAA,QADc;AAEdC,QAAAA;AAFc,OAAhB;AAIA,aAAOG,OAAO,CAACC,OAAR,EAAP;AACD,KARD;AASD;;AACmB,QAAdb,cAAc,GAAG;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAEA,QAAIY,GAAG,GAAG,KAAKH,QAAL,CAAcH,QAAxB;AACA,QAAIO,GAAG,GAAG,KAAKJ,QAAL,CAAcF,SAAxB;AACA,UAAMO,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AACA,UAAMC,IAAI,GAAI,uDAAsDN,GAAI,QAAOC,GAAI,UAASC,GAAI,EAAhG;AACA,UAAMjB,IAAI,GAAG,MAAMsB,KAAK,CAACD,IAAD,CAAxB;AAEA,WAAOR,OAAO,CAACC,OAAR,CAAgBd,IAAhB,CAAP;AACD;;AAxC6B;;AA2ChC,eAAeN,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n \r\n  }\r\n async componentDidMount() {\r\n    await this.getLocation();\r\n    let data =  await this.getWeatherData();\r\n    console.log(data);\r\n  }\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"container center\">\r\n        <Details></Details>\r\n        <Preview></Preview>\r\n      </div>\r\n    );\r\n  }\r\n  async getLocation() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n      console.log(this);\r\n      this.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n      return Promise.resolve();\r\n    });\r\n  }\r\n  async getWeatherData() {\r\n    console.log(this);\r\n\r\n    let lat = this.location.latitude;\r\n    let lon = this.location.longitude;\r\n    const key = process.env.WeatherApiKey;\r\n    const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${lat}&lon=${lon}&appid=${key}`;\r\n    const data = await fetch(link);\r\n\r\n    return Promise.resolve(data);\r\n  }\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}