{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repositories\\\\Private\\\\GitHub\\\\React\\\\Weather\\\\App\\\\src\\\\Components\\\\Wrapper.jsx\";\nimport React, { Component } from \"react\";\nimport \"../bootstrap.css\";\nimport \"../index.css\";\nimport Details from \"./Details\";\nimport Preview from \"./Preview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wrapper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gotLocationData: false\n    };\n\n    this.getLocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        var {\n          latitude,\n          longitude\n        } = position.coords;\n        this.location = {\n          latitude,\n          longitude\n        };\n        this.setState({\n          getLocationData: true\n        });\n      });\n    };\n\n    this.getWeatherData = async () => {\n      if (this.state.gotLocationData) {\n        let {\n          latitude,\n          longitude\n        } = this.location;\n        const key = process.env.WeatherApiKey;\n        const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${latitude}&lon=${longitude}&appid=${key}`;\n        this.weather = {\n          data: await fetch(link)\n        };\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getLocation();\n    setInterval(this.getWeatherData, 500);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container center\",\n      children: [/*#__PURE__*/_jsxDEV(Details, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["C:/Repositories/Private/GitHub/React/Weather/App/src/Components/Wrapper.jsx"],"names":["React","Component","Details","Preview","Wrapper","constructor","props","state","gotLocationData","getLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","location","setState","getLocationData","getWeatherData","key","process","env","WeatherApiKey","link","weather","data","fetch","componentDidMount","setInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AACA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC9BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAOnBC,KAPmB,GAOX;AACNC,MAAAA,eAAe,EAAE;AADX,KAPW;;AAAA,SAkBnBC,WAlBmB,GAkBL,MAAM;AAClBC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrD,YAAI;AAAEC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0BF,QAAQ,CAACG,MAAvC;AAEA,aAAKC,QAAL,GAAgB;AACdH,UAAAA,QADc;AAEdC,UAAAA;AAFc,SAAhB;AAKA,aAAKG,QAAL,CAAc;AAAEC,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD,OATD;AAUD,KA7BkB;;AAAA,SA8BnBC,cA9BmB,GA8BF,YAAY;AAC3B,UAAI,KAAKb,KAAL,CAAWC,eAAf,EAAgC;AAC9B,YAAI;AAAEM,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0B,KAAKE,QAAnC;AACA,cAAMI,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB;AACA,cAAMC,IAAI,GAAI,uDAAsDX,QAAS,QAAOC,SAAU,UAASM,GAAI,EAA3G;AACA,aAAKK,OAAL,GAAe;AACbC,UAAAA,IAAI,EAAE,MAAMC,KAAK,CAACH,IAAD;AADJ,SAAf;AAGD;AACF,KAvCkB;AAElB;;AACDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKpB,WAAL;AACAqB,IAAAA,WAAW,CAAC,KAAKV,cAAN,EAAsB,GAAtB,CAAX;AACD;;AAIDW,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAlB6B;;AA2ChC,eAAe3B,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../bootstrap.css\";\r\nimport \"../index.css\";\r\nimport Details from \"./Details\";\r\nimport Preview from \"./Preview\";\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.getLocation();\r\n    setInterval(this.getWeatherData, 500);\r\n  }\r\n  state = {\r\n    gotLocationData: false,\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container center\">\r\n        <Details></Details>\r\n        <Preview></Preview>\r\n      </div>\r\n    );\r\n  }\r\n  getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      var { latitude, longitude } = position.coords;\r\n\r\n      this.location = {\r\n        latitude,\r\n        longitude,\r\n      };\r\n\r\n      this.setState({ getLocationData: true });\r\n    });\r\n  };\r\n  getWeatherData = async () => {\r\n    if (this.state.gotLocationData) {\r\n      let { latitude, longitude } = this.location;\r\n      const key = process.env.WeatherApiKey;\r\n      const link = `pro.openweathermap.org/data/2.5/forecast/hourly?lat=${latitude}&lon=${longitude}&appid=${key}`;\r\n      this.weather = {\r\n        data: await fetch(link),\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nexport default Wrapper;\r\n"]},"metadata":{},"sourceType":"module"}